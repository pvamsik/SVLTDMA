using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AuthorizeNet.Api.Controllers;
using AuthorizeNet.Api.Contracts.V1;
using AuthorizeNet.Api.Controllers.Bases;
using System.Configuration;
using CommonDTO;

/// <summary>
/// Summary description for AuthorizeNetAIM Class
/// </summary>
public class AuthorizeNetAIM
{
    /// <summary>
    /// Capture a Authorize and Capture a transaction.
    /// </summary>
    /// <param name="shoppingCart">The Shopping Cart with all its items</param>
    /// <param name="devoteeInfo">The Devotee Information Object containg all devotee related information</param>
    /// <param name="crecitCardType">Credit Card Object containing Number, Expiration (mm/yy) and CVV Code</param>
    /// <example> This sample shows how to call the ChargeCard method.
    ///   <code>
    ///     ANetResponse response = AuthorizeNetAIM.CardgeCard(shoppingCart, devoteeInfo, creditCardType);
    ///   </code>
    /// </example>
    /// <returns>
    /// The response is a 2 part response. It contains: 
    /// 1. ANetApiResponse: 
    ///     Transaction Messages
    /// 2. transactionResponse: 
    ///     Transaction ID
    ///     Authorization Code
    ///     Result Code
    ///     CVV Result Code along with other information
    /// </returns>
    public static ANetResponse ChargeCard(shoppingCart sc, devoteeInfo di, creditCardType CC)
    {
        Console.WriteLine("Charge Credit Card Sample");

        ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.SANDBOX;

        // define the merchant information (authentication / transaction id)
        ApiOperationBase<ANetApiRequest, ANetApiResponse>.MerchantAuthentication = new merchantAuthenticationType()
        {
            ItemElementName = ItemChoiceType.transactionKey,
            name = ConfigurationManager.AppSettings["AuthorizeNetCNPLogin"],
            Item = ConfigurationManager.AppSettings["AuthorizeNetCNPTransactionKey"]
        };

        var creditCard = new creditCardType
        {
            cardNumber = CC.cardNumber,
            expirationDate = CC.expirationDate,
            cardCode = CC.cardCode
        };

        var billingAddress = new customerAddressType
        {
            firstName = di.firstName,
            lastName = di.lastName,
            address = di.address1 + " " + di.address2,
            city = di.city,
            zip = di.zip
        };

        //standard api call to retrieve response
        var paymentType = new paymentType { Item = creditCard };

        // Add line Items
        var lineItems = new lineItemType[2];
        lineItems[0] = new lineItemType { itemId = "1", name = "t-shirt", quantity = 2, unitPrice = new Decimal(15.00) };
        lineItems[1] = new lineItemType { itemId = "2", name = "snowboard", quantity = 1, unitPrice = new Decimal(450.00) };

        var transactionRequest = new transactionRequestType
        {
            transactionType = transactionTypeEnum.authCaptureTransaction.ToString(),    // charge the card

            amount = sc.GetTotal(),
            payment = paymentType,
            billTo = billingAddress,
            lineItems = lineItems
        };

        var request = new createTransactionRequest { transactionRequest = transactionRequest };

        // instantiate the contoller that will call the service
        var controller = new createTransactionController(request);
        controller.Execute();

        // get the response from the service (errors contained if any)
        var response = controller.GetApiResponse();
        ANetResponse res = new ANetResponse();

        //validate
        if (response != null)
        {
            res.response = response;
            res.transResponse = response.transactionResponse;
        }
        else
        {
            res.response = new ANetApiResponse();
            res.transResponse = new transactionResponse();
            throw new System.ArgumentException("");
        }
    }

}
