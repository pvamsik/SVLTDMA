using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Text;
using System.Web.Services;
using System.Web.Services.Protocols;
using AjaxControlToolkit;
using Omu.ValueInjecter;
using System.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Logging;


public partial class devoteeAddService : BasePage
{
    bool isAjax = false;
    string serviceId;
    protected ServiceRequestDTO devoteeServiceDTO;

    protected int DevoteeId
    {
        get
        {
            return Utilities.GetInteger(ViewState["DevoteeId"]);
        }
        set
        {
            ViewState["DevoteeId"] = value;
        }
    }

    protected int Service_Request_ID
    {
        get
        {
            return Utilities.GetInteger(ViewState["Service_Request_ID"]);
        }
        set
        {
            ViewState["Service_Request_ID"] = value;
        }
    }

    protected bool IsServiceCancelled
    {
        get
        {
            return Utilities.GetBoolean(ViewState["IsServiceCancelled"]);
        }
        set
        {
            ViewState["IsServiceCancelled"] = value;
        }
    }

    public List<ServiceTypeDTO> ServiceTypes
    {
        get
        {
            if (ViewState["serviceTypes"] == null)
                ServiceTypes = data.GetServiceTypes();

            return (List<ServiceTypeDTO>)ViewState["serviceTypes"];
        }
        set
        {
            ViewState["serviceTypes"] = value;
        }
    }

    public List<ServiceDTO> Services
    {
        get
        {
            if (ViewState["services"] == null)
                ViewState["services"] = data.GetServices();

            return (List<ServiceDTO>)ViewState["services"];
        }
    }

    public List<PaymentTypeDTO> PaymentTypes
    {
        get
        {
            if (ViewState["paymentTypes"] == null)
                ViewState["paymentTypes"] = data.GetPaymentTypes();

            return (List<PaymentTypeDTO>)ViewState["paymentTypes"];
        }
    }

    public List<CreditCardTypeDTO> CreditCardTypes
    {
        get
        {
            if (ViewState["creditCardTypes"] == null)
                ViewState["creditCardTypes"] = data.GetCreditCardTypes();

            return (List<CreditCardTypeDTO>)ViewState["creditCardTypes"];
        }
    }

    public List<PriestDTO> Priests
    {
        get
        {
            if (ViewState["priests"] == null)
                ViewState["priests"] = data.GetPriests();

            return (List<PriestDTO>)ViewState["priests"];
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        isAjax = Utilities.GetBoolean(Request.QueryString["ajax"]);



        if (!IsPostBack && !isAjax)
        {
            DevoteeId = Utilities.GetInteger(Request.QueryString["devoteeid"]);


            rdlServiceLocation.DataSource = ServiceTypes;
            rdlServiceLocation.DataBind();

            rdlPaymentType.DataSource = PaymentTypes;
            rdlPaymentType.DataBind();

            rdlCCType.DataSource = CreditCardTypes;
            rdlCCType.DataBind();


            rdlPaymentType.SelectedIndex = 0;
            rdlCCType.SelectedIndex = 0;
            rdlServiceLocation.SelectedIndex = 0;

            ddlService.DataSource = Services.FindAll(s => s.Service_Type_ID.ToString() == rdlServiceLocation.SelectedValue);
            ddlService.DataBind();

            txtPaidFee.Text = Services.Find(s => s.Service_ID.ToString() == ddlService.SelectedValue).Service_Fee;

            hdnServiceId.Value = ddlService.SelectedValue;

            txtServiceDate.Text = DateTime.Today.ToShortDateString();
        }
        else
        {
            ddlService.DataSource = Services.FindAll(s => s.Service_Type_ID.ToString() == rdlServiceLocation.SelectedValue);
            ddlService.DataBind();

            ddlService.SelectedIndex = ddlService.Items.IndexOf(ddlService.Items.FindByValue(hdnServiceId.Value));
        }

        if (isAjax)
        {
            serviceId = Request.QueryString["serviceid"] ?? "0";

            StringBuilder sb = new StringBuilder();
            StringWriter sw = new StringWriter(sb);
            HtmlTextWriter hw = new HtmlTextWriter(sw);


            bool isLocation = Utilities.GetBoolean(Request.QueryString["islocation"]);

            bool isService = Utilities.GetBoolean(Request.QueryString["isservice"]);

            if (isLocation)
            {
                string serviceTypeId = Request.QueryString["servicetypeid"] ?? "0";

                ddlService.DataSource = Services.FindAll(s => s.Service_Type_ID.ToString() == serviceTypeId);
                ddlService.DataBind();
            }

            if (isLocation)
                serviceId = ddlService.SelectedValue;

            ServiceDTO ss = Services.Find(s => s.Service_ID.ToString() == serviceId);

            if (isLocation)
            {
                HtmlGenericControl div = new HtmlGenericControl("div");

                hdnServiceFee.Value = ss.Service_Fee.ToString();
                div.Controls.Add(hdnServiceFee);
                div.Controls.Add(ddlService);
                div.RenderControl(hw);
            }
            else
            {
                sb.Append(ss.Service_Fee.ToString());
            }

            Response.ContentType = "text/plain";
            Response.Write(sb.ToString());
            Response.End();
        }
    }

    protected void ddlService_DataBinding(object sender, EventArgs e)
    {

    }

    protected void serviceLocation_DataBound(object sender, EventArgs e)
    {
        rdlServiceLocation.SelectedIndex = 0;
    }

    protected void rdPaymentType_DataBound(object sender, EventArgs e)
    {
        rdlPaymentType.SelectedIndex = 0;
    }

    protected void rdCCType_DataBound(object sender, EventArgs e)
    {
        rdlCCType.SelectedIndex = 0;
    }

    private string PopulateBody(string userName, string serviceName, string serviceAmount)
    {
        string body = string.Empty;
        using (StreamReader reader = new StreamReader(Server.MapPath("~/assets/emailTemplate.html")))
        {
            body = reader.ReadToEnd();
        }
        body = body.Replace("{UserName}", userName);
        body = body.Replace("{ServiceName}", serviceName);
        body = body.Replace("{ServiceAmount}", serviceAmount);
        return body;
    }

    protected void cmdAddService_Click(object sender, EventArgs e)
    {
        IsServiceCancelled = false;
        string devoteeId;
        devoteeId = Request.QueryString["devoteeId"];
        if (devoteeId != null)
        {

            //Populate the Devotee Info
            devoteeInfo di = new devoteeInfo();

            Label tb = (Label)FormView1.FindControl("lblDIFName");
            di.firstName = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIMName");
            di.middleName = tb.Text;
            tb = (Label)FormView1.FindControl("lblDILName");
            di.lastName = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIAddress1");
            di.address1 = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIAddress2");
            di.address2 = tb.Text;
            tb = (Label)FormView1.FindControl("lblDICity");
            di.city = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIState");
            di.state = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIZip");
            di.zip = tb.Text;
            tb = (Label)FormView1.FindControl("lblDIEmail");
            di.email = tb.Text;

            string serviceName = Services.Find(t => t.Service_ID.ToString() == ddlService.SelectedValue.ToString()).Service_Name;
            decimal amount = Convert.ToDecimal(txtPaidFee.Text);
            bool IsServiceRequested = false;
            switch (rdlPaymentType.SelectedValue)
            {
                case "1":
                    AddNewRequest();
                    IsServiceRequested = ProcessCheckPayment(di, serviceName, amount);
                    break;
                case "2":
                    AddNewRequest();
                    IsServiceRequested = ProcessCashPayment(di, serviceName, amount);
                    break;
                case "3":
                    AddNewRequest();
                    IsServiceRequested = ProcessCreditCardPayment(di, serviceName, amount);
                    break;
                default:
                    break;
            }

            if (IsServiceRequested)
                //Response.Redirect("devoteeServiceHistory.aspx?devoteeId=" + Request.QueryString["devoteeId"], false);
                //Response.Redirect("devoteeServiceHistory.aspx?servicerequestid=" + Service_Request_ID, false);
                Response.Redirect("ServiceRequestDetails.aspx?servicerequestid=" + Service_Request_ID, false);
        }
        else
        {
            Response.Redirect("~/default.aspx");
        }
    }

    private bool ProcessCheckPayment(devoteeInfo di, string serviceName, decimal amount)
    {

        if (di.email != "")
        {
            //Populate the Email body based on email template and send email
            string body = PopulateBody(di.firstName, serviceName, amount.ToString());

            EmailProvider ep = new EmailProvider();
            List<string> receivers = new List<string>();
            receivers.Add("receipts@svlotustemple.org");
            string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

            if (sendEmailResultStatus != "Success")
            {
                LogEntry logEntry = new LogEntry();
                logEntry.EventId = 100;
                logEntry.Priority = 2;
                logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                Logger.Write(logEntry);
            }
        }

        //Check if printer is Online
        printManager pM = new printManager();
        if (pM.testPrinterStatus() == true)
        {
            pM.printCheckReceipt(serviceName, amount.ToString(), di, txtCheckNumber.Text);
            lblPrinterMsg.Visible = false;
        }
        else
        {
            lblPrinterMsg.Text = "Printer Offline!!!";
            lblPrinterMsg.Visible = true;
        }

        return true;
    }

    private bool ProcessCashPayment(devoteeInfo di, string serviceName, decimal amount)
    {

        if (di.email != "")
        {
            //Populate the Email body based on email template and send email
            string body = PopulateBody(di.firstName, serviceName, amount.ToString());
            EmailProvider ep = new EmailProvider();

            List<string> receivers = new List<string>();
            receivers.Add("receipts@svlotustemple.org");
            string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

            if (sendEmailResultStatus != "Success")
            {
                LogEntry logEntry = new LogEntry();
                logEntry.EventId = 100;
                logEntry.Priority = 2;
                logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                Logger.Write(logEntry);
            }
        }

        //Check if printer is Online
        printManager pM = new printManager();
        if (pM.testPrinterStatus() == true)
        {
            pM.printCashReceipt(serviceName, amount.ToString(), di);
            lblPrinterMsg.Visible = false;
        }
        else
        {
            lblPrinterMsg.Text = "Printer Offline!!!";
            lblPrinterMsg.Visible = true;
        }

        return true;
    }

    private bool ProcessCreditCardPayment(devoteeInfo di, string serviceName, decimal amount)
    {
        bool flag = false;
        string expirationMonth, expirationYear;

        expirationMonth = txtCardExpDate.Text.Substring(2, 2);
        expirationYear = txtCardExpDate.Text.Substring(0, 2);

        //Try sending the payment request to Authorize.Net
        paymentProcessor pp = new paymentProcessor(ConfigurationManager.AppSettings["AuthorizeNetTransactionType"]);
        paymentResponse res = pp.processPaymentWithoutCard(txtCardNumber.Text, String.Concat(expirationYear, expirationMonth), amount, serviceName, di);
        //paymentResponse res = pp.processPaymentWithCard(amount, txtCardNumber.Text, expirationMonth, expirationYear, di);

        if (res.Approved == true)
        {
            flag = true;
            string ccExpiration = expirationYear + expirationMonth;
            string ccType = rdlCCType.SelectedValue;
            int Service_Req_Tran_ID = data.AddEditServiceRequestTransaction(Service_Request_ID, 0, "Purchase", res, ccType, ccExpiration);

            if (di.email != "")
            {
                //Populate the Email body based on email template and send email
                string body = PopulateBody(di.firstName, serviceName, amount.ToString());
                EmailProvider ep = new EmailProvider();

                List<string> receivers = new List<string>();
                receivers.Add("receipts@svlotustemple.org");
                string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

                if (sendEmailResultStatus != "Success")
                {
                    LogEntry logEntry = new LogEntry();
                    logEntry.EventId = 100;
                    logEntry.Priority = 2;
                    logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                    Logger.Write(logEntry);
                }
            }

            //Check if printer is Online and print the receipt if Printer is Online
            printManager pM = new printManager();
            if (pM.testPrinterStatus() == true)
            {
                pM.printCCReceipt(serviceName, amount.ToString(), res, rdlCCType.SelectedValue, "Purchase", expirationMonth, expirationYear, di);
                lblPrinterMsg.Visible = false;
            }
            else
            {
                lblPrinterMsg.Text = "Printer Offline!!!";
                lblPrinterMsg.Visible = true;
            }

            //Hide message for authorization error
            lblAuthorizationError.Visible = false;
        }
        else
        {
            flag = false;
            data.DeleteServiceRequest(Service_Request_ID);
            Service_Request_ID = 0;
            lblAuthorizationError.Text = res.Message;
            lblAuthorizationError.Visible = true;
        }

        if (res.AVSResponse == "No Match on Address (Street) or ZIP" || res.AVSResponse == "Five digit ZIP matches, Address (Street) does not")
        {
            System.Windows.Forms.MessageBox.Show("Please confirm address with Devotee!!!", "Address Mismatch", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
        }

        return flag;
    }

    public void AddNewRequest()
    {
        //Finally store the information to the database
        ServiceRequestDTO devoteeServiceDTO = new ServiceRequestDTO();
        devoteeServiceDTO.Devotee_ID = DevoteeId;
        devoteeServiceDTO.Service_ID = int.Parse(ddlService.SelectedItem.Value);
        devoteeServiceDTO.Service_Date = txtServiceDate.Text;
        devoteeServiceDTO.Service_Fee_Paid = txtPaidFee.Text;
        devoteeServiceDTO.Payment_Type_id = int.Parse(rdlPaymentType.SelectedItem.Value);
        devoteeServiceDTO.Check_Number = txtCheckNumber.Text;
        //devoteeServiceDTO.Credit_Card_Type_id = int.Parse(rdlCCType.SelectedItem.Value);
        //devoteeServiceDTO.Card_Holder_Name = txtCardHolderName.Text;
        //devoteeServiceDTO.Card_Number = txtCardNumber.Text;
        //devoteeServiceDTO.Card_Exp_date = txtCardExpDate.Text;
        //devoteeServiceDTO.Card_Cvn_Number = txtCardCVVNumber.Text;

        Service_Request_ID = data.AddServiceRequest(devoteeServiceDTO);
    }

    protected void txtCCSwipe_TextChanged(object sender, EventArgs e)
    {
        string string1;
        string1 = txtCCSwipe.Text;

        string[] ccparts;
        ccparts = string1.Split('^');

        string ccNumber = ccparts[0].Substring(2);
        string ccName = ccparts[1].Trim();
        string ccExpiration = ccparts[2].Substring(0, 4);

        txtCardHolderName.Text = ccName;
        txtCardNumber.Text = ccNumber;
        txtCardExpDate.Text = ccExpiration;
    }

    //private bool ProcessCreditCardPayment(devoteeInfo di, string serviceName, decimal amount)
    //{
    //    //Try sending the payment request to Authorize.Net
    //    paymentProcessor pp = new paymentProcessor("CNP");
    //    paymentResponse res = pp.processPaymentWithoutCard(txtCardNumber.Text, txtCardExpDate.Text, amount, serviceName, di);

    //    bool flag = false;

    //    if (res.Approved == true)
    //    {
    //        flag = true;

    //        int Service_Req_Tran_ID = data.AddEditServiceReqestTransaction(Service_Request_ID, 0, "", res);


    //        if (di.email != "")
    //        {
    //            //Populate the Email body based on email template and send email
    //            string body = PopulateBody(di.firstName, serviceName, amount.ToString());
    //            EmailProvider ep = new EmailProvider();
    //            ep.sendEmail("Thank You for your Order", body, di.email);
    //        }

    //        //Check if printer is Online and print the receipt if Printer is Online
    //        printManager pM = new printManager();
    //        if (pM.testPrinterStatus() == true)
    //        {
    //            pM.printReceipt(serviceName, amount.ToString());
    //            lblPrinterMsg.Visible = false;
    //        }
    //        else
    //        {
    //            lblPrinterMsg.Text = "Printer Offline!!!";
    //            lblPrinterMsg.Visible = true;
    //        }

    //        //Hide message for authorization error
    //        lblAuthorizationError.Visible = false;
    //    }
    //    else
    //    {
    //        flag = false;
    //        data.DeleteServiceRequest(Service_Request_ID);
    //        Service_Request_ID = 0;
    //        lblAuthorizationError.Text = res.Message;
    //        lblAuthorizationError.Visible = true;
    //    }

    //    return flag;
    //}
}