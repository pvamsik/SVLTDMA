using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Practices.EnterpriseLibrary.Logging;

public partial class Controls_AddServiceRequest : System.Web.UI.UserControl
{
    Data data;
    int Service_Request_ID;

    protected int Devotee_ID
    {
        get
        {
            return Utilities.GetInteger(ViewState["DevoteeID"]);
        }
        set
        {
            ViewState["DevoteeID"] = value;
        }
    }

    protected List<ServiceTypeDTO> ServiceTypes
    {
        get
        {
            if (ViewState["ServiceTypes"] == null)
                ViewState["ServiceTypes"] = data.GetServiceTypes();

            return (List<ServiceTypeDTO>)ViewState["ServiceTypes"];

        }
    }

    protected List<ServiceDTO> Services
    {
        get
        {
            if (ViewState["Services"] == null)
                ViewState["Services"] = data.GetServices();

            return (List<ServiceDTO>)ViewState["Services"];

        }
    }

    protected List<ServiceDTO> ServiceList()
    {
        if (ddlServiceLocation.SelectedItem == null)
            return Services.FindAll(s => s.Service_Type_ID == ServiceTypes.FirstOrDefault().Service_Type_ID);
        else
            return Services.FindAll(s => s.Service_Type_ID.ToString() == ddlServiceLocation.SelectedItem.Value);

    }

    public List<PaymentTypeDTO> PaymentTypes
    {
        get
        {
            if (ViewState["paymentTypes"] == null)
                ViewState["paymentTypes"] = data.GetPaymentTypes();

            return (List<PaymentTypeDTO>)ViewState["paymentTypes"];
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        data = new Data();

        if (!IsPostBack)
        {
            Devotee_ID = Utilities.GetInteger(Request.QueryString["devoteeid"]);

            ddlServiceLocation.DataSource = ServiceTypes;
            ddlServiceLocation.DataBind();

            ServiceTypeDTO serviceTypeDto = ServiceTypes.Find(st => st.ShowDefault == true);
            if (serviceTypeDto != null)
                ddlServiceLocation.SelectedIndex = ddlServiceLocation.Items.IndexOf(ddlServiceLocation.Items.FindByValue(serviceTypeDto.Service_Type_ID.ToString()));

            ddlService.DataSource = SDS_Services; /*ServiceList();*/
            ddlService.DataBind();

            ServiceDTO srvDto = ServiceList().Find(st => st.ShowDefault == true);
            if (srvDto != null)
                ddlService.SelectedIndex = ddlService.Items.IndexOf(ddlService.Items.FindByValue(srvDto.Service_ID.ToString()));

            txtPaidFee.Text = string.Format("{0:c}", Services.FirstOrDefault().Service_Fee);


            rdlPaymentType.DataSource = PaymentTypes;
            rdlPaymentType.DataBind();
            PaymentTypeDTO paymentTypeDto = PaymentTypes.Find(st => st.ShowDefault == true);
            if (paymentTypeDto != null)
                rdlPaymentType.SelectedIndex = rdlPaymentType.Items.IndexOf(rdlPaymentType.Items.FindByValue(paymentTypeDto.Payment_type_ID.ToString()));

        }
    }
    protected void cmdAddService_Click(object sender, EventArgs e)
    {
        string devoteeId;
        devoteeId = Request.QueryString["devoteeId"];
        if (devoteeId != null)
        {

            //Populate the Devotee Info
            devoteeInfo di = new devoteeInfo(devoteeId);

            string serviceName = Services.Find(t => t.Service_ID.ToString() == ddlService.SelectedValue.ToString()).Service_Name;
            decimal amount = Convert.ToDecimal(txtPaidFee.Text);
            bool IsServiceRequested = false;
            switch (rdlPaymentType.SelectedValue)
            {
                case "1":
                    AddNewRequest();
                    IsServiceRequested = ProcessCheckPayment(di, serviceName, amount);
                    break;
                case "2":
                    AddNewRequest();
                    IsServiceRequested = ProcessCashPayment(di, serviceName, amount);
                    break;
                case "3":
                    AddNewRequest();
                    IsServiceRequested = ProcessCreditCardPayment(di, serviceName, amount);
                    break;
                default:
                    break;
            }

            if (IsServiceRequested)
                //Response.Redirect("devoteeServiceHistory.aspx?devoteeId=" + Request.QueryString["devoteeId"], false);
                //Response.Redirect("devoteeServiceHistory.aspx?servicerequestid=" + Service_Request_ID, false);
                Response.Redirect("ServiceRequestDetails.aspx?servicerequestid=" + Service_Request_ID, false);
        }
        else
        {
            Response.Redirect("~/default.aspx");
        }
    }
    private bool ProcessCheckPayment(devoteeInfo di, string serviceName, decimal amount)
    {

        if (di.email != "")
        {
            //Populate the Email body based on email template and send email
            string body = PopulateBody(di.firstName, serviceName, amount.ToString());

            EmailProvider ep = new EmailProvider();
            List<string> receivers = new List<string>();
            receivers.Add("receipts@svlotustemple.org");
            string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

            if (sendEmailResultStatus != "Success")
            {
                LogEntry logEntry = new LogEntry();
                logEntry.EventId = 100;
                logEntry.Priority = 2;
                logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                Logger.Write(logEntry);
            }
        }

        //Check if printer is Online
        printManager pM = new printManager();
        if (pM.testPrinterStatus() == true)
        {
            pM.printCheckReceipt(serviceName, amount.ToString(), di, txtCheckNumber.Text);
            lblPrinterMsg.Visible = false;
        }
        else
        {
            lblPrinterMsg.Text = "Printer Offline!!!";
            lblPrinterMsg.Visible = true;
        }

        return true;
    }

    private bool ProcessCashPayment(devoteeInfo di, string serviceName, decimal amount)
    {

        if (di.email != "")
        {
            //Populate the Email body based on email template and send email
            string body = PopulateBody(di.firstName, serviceName, amount.ToString());

            EmailProvider ep = new EmailProvider();
            List<string> receivers = new List<string>();
            receivers.Add("receipts@svlotustemple.org");
            string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

            if (sendEmailResultStatus != "Success")
            {
                LogEntry logEntry = new LogEntry();
                logEntry.EventId = 100;
                logEntry.Priority = 2;
                logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                Logger.Write(logEntry);
            }
        }

        //Check if printer is Online
        printManager pM = new printManager();
        if (pM.testPrinterStatus() == true)
        {
            pM.printCashReceipt(serviceName, amount.ToString(), di);
            lblPrinterMsg.Visible = false;
        }
        else
        {
            lblPrinterMsg.Text = "Printer Offline!!!";
            lblPrinterMsg.Visible = true;
        }

        return true;
    }

    private bool ProcessCreditCardPayment(devoteeInfo di, string serviceName, decimal amount)
    {
        bool flag = false;
        string expirationMonth, expirationYear;

        expirationMonth = ddlCCExpMonth.SelectedValue; //txtCardExpDate.Text.Substring(2, 2);
        expirationYear = ddlCCExpYear.SelectedValue; //txtCardExpDate.Text.Substring(0, 2);

        try
        {
            //Try sending the payment request to Authorize.Net
            paymentProcessor pp = new paymentProcessor(ConfigurationManager.AppSettings["AuthorizeNetTransactionType"]);
            paymentResponse res = pp.processPaymentWithoutCard(txtCardNumber.Text, String.Concat(expirationMonth, expirationYear), amount, serviceName, di);
            //paymentResponse res = pp.processPaymentWithCard(amount, txtCardNumber.Text, expirationMonth, expirationYear, di);

            if (res.Approved == true)
            {
                flag = true;
                string ccExpiration = expirationYear + expirationMonth;
                string ccType = rdlCCType.SelectedValue;
                int Service_Req_Tran_ID = data.AddEditServiceRequestTransaction(Service_Request_ID, 0, "Purchase", res, ccType, ccExpiration);

                if (di.email != "")
                {
                    //Populate the Email body based on email template and send email
                    string body = PopulateBody(di.firstName, serviceName, amount.ToString());

                    EmailProvider ep = new EmailProvider();
                    List<string> receivers = new List<string>();
                    receivers.Add("receipts@svlotustemple.org");
                    string sendEmailResultStatus = ep.sendEmail("Thank You for your Order", body, di.email, receivers);

                    if (sendEmailResultStatus != "Success")
                    {
                        LogEntry logEntry = new LogEntry();
                        logEntry.EventId = 100;
                        logEntry.Priority = 2;
                        logEntry.Message = "Failed to send email due to the followwing reason: " + sendEmailResultStatus;
                        Logger.Write(logEntry);
                    }
                }

                //Check if printer is Online and print the receipt if Printer is Online
                printManager pM = new printManager();
                if (pM.testPrinterStatus() == true)
                {
                    pM.printCCReceipt(serviceName, amount.ToString(), res, rdlCCType.SelectedItem.ToString(), "Purchase", expirationMonth, expirationYear, di);
                    lblPrinterMsg.Visible = false;
                }
                else
                {
                    lblPrinterMsg.Text = "Printer Offline!!!";
                    lblPrinterMsg.Visible = true;
                }

                //Hide message for authorization error
                lblAuthorizationError.Visible = false;
            }
            else
            {
                flag = false;
                data.DeleteServiceRequest(Service_Request_ID);
                Service_Request_ID = 0;
                lblAuthorizationError.Text = res.ResponseCode + ": " + res.Message;
                lblAuthorizationError.Visible = true;
            }

            if (res.AVSResponse == "No Match on Address (Street) or ZIP" || res.AVSResponse == "Five digit ZIP matches, Address (Street) does not")
            {
                System.Windows.Forms.MessageBox.Show("Please confirm address with Devotee!!!", "Address Mismatch", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
            }
        }
        catch (Exception ex)
        {
            //Display any error messages received due to Authorize.net being offline or some other service level errors. 
            lblAuthorizationError.Text = ex.Message;
        }

        return flag;
    }

    public void AddNewRequest()
    {
        //Finally store the information to the database
        ServiceRequestDTO devoteeServiceDTO = new ServiceRequestDTO();
        devoteeServiceDTO.Devotee_ID = Devotee_ID;
        devoteeServiceDTO.Service_ID = int.Parse(ddlService.SelectedItem.Value);
        devoteeServiceDTO.Service_Date = txtServiceDate.Text;
        devoteeServiceDTO.Service_Fee_Paid = txtPaidFee.Text;
        devoteeServiceDTO.Payment_Type_id = int.Parse(rdlPaymentType.SelectedItem.Value);
        devoteeServiceDTO.Check_Number = txtCheckNumber.Text;
        devoteeServiceDTO.Created_Date = Convert.ToString(new DateTime());

        Service_Request_ID = data.AddServiceRequest(devoteeServiceDTO);
    }
    protected void ddlServiceLocation_SelectedIndexChanged(object sender, EventArgs e)
    {
        //List<ServiceDTO> sList = Services.FindAll(s => s.Service_Type_ID.ToString() == ddlServiceLocation.SelectedValue);
        ddlService.DataSource = ServiceList();
        ddlService.DataBind();

        ServiceDTO srvDto = ServiceList().Find(st => st.ShowDefault == true);
        if (srvDto != null)
            ddlService.SelectedIndex = ddlService.Items.IndexOf(ddlService.Items.FindByValue(srvDto.Service_ID.ToString()));

        txtPaidFee.Text = string.Format("{0:c}", Services.Find(s => s.Service_ID.ToString() == ddlService.SelectedItem.Value).Service_Fee);
    }

    protected void ddlService_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtPaidFee.Text = string.Format("{0:c}", Services.Find(s => s.Service_ID.ToString() == ddlService.SelectedItem.Value).Service_Fee);
    }

    protected void txtCCSwipe_TextChanged(object sender, EventArgs e)
    {
        string string1;
        try
        {
            string1 = txtCCSwipe.Text;

            string[] ccparts;
            ccparts = string1.Split('^');

            string ccNumber = ccparts[0].Substring(2);
            string ccName = ccparts[1].Trim();
            string ccExpiration = ccparts[2].Substring(0, 4);

            txtCardHolderName.Text = ccName;
            txtCardNumber.Text = ccNumber;
            txtCardExpDate.Text = ccExpiration;
            ddlCCExpYear.SelectedValue = ccExpiration.Substring(0, 2);
            ddlCCExpMonth.SelectedValue = ccExpiration.Substring(2, 2);
            txtCCSwipe.Text = "";
            lblCCReader.Visible = false;
        }
        catch (Exception)
        {
            txtCCSwipe.Text = "";
            txtCardHolderName.Text = "";
            txtCardNumber.Text = "";
            txtCardExpDate.Text = "";
            ddlCCExpYear.SelectedIndex = 0;
            ddlCCExpMonth.SelectedIndex = 0;
            lblCCReader.Visible = true;
            lblCCReader.Text = "Unable to read Credit Card";
        }
    }

    private string PopulateBody(string userName, string serviceName, string serviceAmount)
    {
        string body = string.Empty;
        using (StreamReader reader = new StreamReader(Server.MapPath("~/assets/emailTemplate.html")))
        {
            body = reader.ReadToEnd();
        }
        body = body.Replace("{UserName}", userName);
        body = body.Replace("{ServiceName}", serviceName);
        body = body.Replace("{ServiceAmount}", serviceAmount);
        return body;
    }
}